*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.container{
    margin: 10px;
    display: grid;
    grid-template-columns: 50px 2fr repeat(2, 100px);
    /* В гриде лучше всего использовать фракции. Но можно комбинировать с пикселями. Тогда фракции будут респонсивни, а пиксели оставаться такими же. С помощью функции репит можно укоротить код, в скобках первое число указывает на то сколько раз повторить, а второе число пиксели или фракции. но можно добавить и третье число и тогда он будет чередовать второе и третье числа. */
    /* grid-template-rows: 100px 150px 50p-x; */
    grid-template-rows: repeat(3, 150px);
    /* grid-auto-rows: 120px; */
    /* это 3 способа как написать высоту гридовых рядов */
    grid-template-areas: "header header header"
                        " aside1 main aside2"
                        "aside1 footer footer";
                        /* таким образом можно назвать ячейки, что бы с помощью grid-area которая написана ниже можно было растянуть до нужных нам величин и разместить так как надо, очень очень очень полезная штука */

}

.obdelnik{
    width: 100%;
    /* height: 80px; */
    background-color: rgb(66, 184, 11);
    border: 2px solid black;
    border-radius: 3%;
    font-size: 30px;
    text-align: center;
    /* line-height: 80px; */
}

.obdelnik:nth-child(3){
    /* grid-column: span 2; */
    /* grid-column: 2/4; */
    /* grid-row: 1/ span 2; */
    /* когда пишешь спан и число, то ты говоришь блоку насколько блоков ему нужно растянуться, это можно писать как в вертикально1 так и в горизонтальной плоскостях */
}



.obdelnik:nth-child(1){
    grid-area: header;
}

.obdelnik:nth-child(2){
grid-area: aside1;
}

.obdelnik:nth-child(3){
    grid-area: aside2;
}

.obdelnik:nth-child(4){
    grid-area: footer;
}