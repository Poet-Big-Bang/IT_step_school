.ancestor {
    width: 800px;
    height: 800px;
    background-color: lightyellow;
    position: relative;
    /* Устанавливаем позицию родительского контейнера */
}

h1 {
    position: absolute;
    /* Устанавливаем позицию абсолютную относительно родительского контейнера */
    top: 10%;
    /* Размещаем надпись в самом верху контейнера */
    left: 50%;
    /* Размещаем надпись по горизонтали по середине контейнера */
    transform: translateX(-50%);
    /* Корректируем положение надписи по горизонтали */
}

.ancestor .descendant.img.pencil img,
.ancestor .descendant.img.calc img,
.ancestor .descendant.img.pallete img {
    width: 80px;
    height: 80px;
}

.ancestor .descendant.img.book img,
.ancestor .descendant.img.paper img {
    width: 110px;
    height: 110px;
}



@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(100%);
    }

    to {
        opacity: 1;
    }
}
/* Добавляем класс для начальных значений */


.ancestor .descendant.img.start {
    transform: translateY(100%);
    /* Начальное положение - выезжают снизу */

}

.ancestor .descendant.img {
    animation: fadeIn 2s ease forwards;
    /* Применяем анимацию для всех картинок */
    opacity: 0;
}

/* Добавляем задержку анимации для каждой картинки */
.ancestor .descendant.img.pencil {
    animation-delay: 0s;
    /* Появляется сразу */
    position: absolute;
    /* Устанавливаем позицию абсолютную */
    bottom: 10%;
    /* Размещаем внизу контейнера */
    left: 45%;
    /* Размещаем по горизонтали по середине контейнера */
    transform: translateX(-50%);
    /* Корректируем положение по горизонтали */
    transform: rotate(90deg);
    /* Поворот на 90 градусов по часовой стрелке */
    opacity: 1;
}

.ancestor .descendant.img.calc {
    animation-delay: 0.5s;
    /* Появляется через 0.5 секунды */
    position: absolute;
    /* Устанавливаем позицию абсолютную */
    bottom: 3%;
    /* Размещаем вверху относительно нижнего края контейнера */
    left: calc(50% - 200px);
    /* Размещаем по горизонтали по середине контейнера и учитываем ширину картинки */
    transform: translateY(-100%) rotate(-30deg);
    /* Поворот на 30 градусов по часовой стрелке */
}

.ancestor .descendant.img.book {
    animation-delay: 1s;
    /* Появляется через 1 секунду */
    position: absolute;
    /* Устанавливаем позицию абсолютную */
    bottom: 5%;
    /* Размещаем вверху относительно нижнего края контейнера */
    left: calc(50% - 105px);
    /* Размещаем по горизонтали по середине контейнера и учитываем ширину картинки */
    transform: translateY(-100%) rotate(-15deg);
    /* Поворот на 60 градусов по часовой стрелке */
}

.ancestor .descendant.img.paper {
    animation-delay: 1.5s;
    /* Появляется через 1.5 секунды */
    position: absolute;
    /* Устанавливаем позицию абсолютную */
    bottom: 5%;
    /* Размещаем вверху относительно нижнего края контейнера */
    left: calc(50% + 20px);
    /* Размещаем по горизонтали по середине контейнера и учитываем ширину картинки */
    transform: translateY(-100%) rotate(15deg);
    /* Поворот на -30 градусов по часовой стрелке */
}

.ancestor .descendant.img.pallete {
    animation-delay: 2s;
    /* Появляется через 2 секунды */
    position: absolute;
    /* Устанавливаем позицию абсолютную */
    bottom: 3%;
    /* Размещаем вверху относительно нижнего края контейнера */
    left: calc(50% + 140px);
    /* Размещаем по горизонтали по середине контейнера и учитываем ширину картинки */
    transform: translateY(-100%) rotate(225deg);
    /* Поворот на -60 градусов по часовой стрелке */
}


/* 1.Сначала мы создаем стиль для родительского контейнера с классом .ancestor. Этот контейнер имеет определенные размеры (ширина и высота) и цвет фона, который устанавливается как светло-желтый (lightyellow). Это обеспечивает определенный контекст для размещения изображений.

2.Затем мы определяем стиль для заголовка h1, который используется для текстового содержимого. Заголовок позиционируется абсолютно в верхней части родительского контейнера и центрируется по горизонтали с помощью свойства left: 50% и сдвига на 50% относительно его собственной ширины влево с помощью transform: translateX(-50%).

3.Для изображений с классами .pencil, .calc, .pallete, .book и .paper устанавливаются размеры, чтобы они были одинакового размера и выглядели согласованно на странице.

4.Мы создаем анимацию с названием fadeIn, которая используется для плавного появления изображений. В этой анимации мы задаем начальные и конечные свойства стилей, чтобы изображения плавно изменяли свою прозрачность и положение.

5.Каждое изображение также имеет класс .start, который определяет его начальное положение до начала анимации. Это положение находится внизу контейнера (transform: translateY(100%)), что делает изображения невидимыми и находящимися за пределами контейнера.

6.Для всех изображений применяется анимация fadeIn с продолжительностью 2 секунды, чтобы они появлялись плавно и одновременно.
Задержка анимации определяется для каждого изображения отдельно с помощью свойства animation-delay. Это позволяет контролировать момент начала анимации для каждого изображения, создавая последовательное появление.

7.Наконец, позиция и поворот каждого изображения настраиваются с учетом его местоположения в родительском контейнере. Это делается с помощью свойств position, bottom, left и transform, которые определяют, где и как каждое изображение будет размещено и ориентировано на странице. */